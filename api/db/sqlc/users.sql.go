// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: users.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createOrUpdateUser = `-- name: CreateOrUpdateUser :one
INSERT INTO users (
  display_name,
  spotify_id,
  country,
  image_url
) VALUES (
  $1,$2,$3,$4
) 
ON CONFLICT (spotify_id)
DO UPDATE 
SET display_name = $1,
    country = $3,
    image_url = $4
RETURNING spotify_id, display_name, country, image_url, choices
`

type CreateOrUpdateUserParams struct {
	DisplayName string         `json:"displayName"`
	SpotifyID   string         `json:"spotifyID"`
	Country     sql.NullString `json:"country"`
	ImageUrl    sql.NullString `json:"imageUrl"`
}

func (q *Queries) CreateOrUpdateUser(ctx context.Context, arg CreateOrUpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createOrUpdateUser,
		arg.DisplayName,
		arg.SpotifyID,
		arg.Country,
		arg.ImageUrl,
	)
	var i User
	err := row.Scan(
		&i.SpotifyID,
		&i.DisplayName,
		&i.Country,
		&i.ImageUrl,
		pq.Array(&i.Choices),
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT spotify_id, display_name, country, image_url, choices FROM users 
WHERE spotify_id = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, spotifyID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, spotifyID)
	var i User
	err := row.Scan(
		&i.SpotifyID,
		&i.DisplayName,
		&i.Country,
		&i.ImageUrl,
		pq.Array(&i.Choices),
	)
	return i, err
}
