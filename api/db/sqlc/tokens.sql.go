// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: tokens.sql

package db

import (
	"context"
	"time"
)

const createOrUpdateSpotifyTokens = `-- name: CreateOrUpdateSpotifyTokens :one
INSERT INTO spotify_tokens (
  spotify_user_id, 
  created_at,
  refresh_token,
  access_token,
  expires_at,
  token_type
) VALUES (
  $1,$2,$3,$4,$5,$6
) 
ON CONFLICT(spotify_user_id)
DO UPDATE 
SET created_at = $2,
    refresh_token = $3,
    access_token = $4,
    expires_at = $5,
    token_type = $6
RETURNING id, spotify_user_id, created_at, refresh_token, access_token, expires_at, token_type
`

type CreateOrUpdateSpotifyTokensParams struct {
	SpotifyUserID string    `json:"spotifyUserID"`
	CreatedAt     time.Time `json:"createdAt"`
	RefreshToken  string    `json:"refreshToken"`
	AccessToken   string    `json:"accessToken"`
	ExpiresAt     time.Time `json:"expiresAt"`
	TokenType     string    `json:"tokenType"`
}

func (q *Queries) CreateOrUpdateSpotifyTokens(ctx context.Context, arg CreateOrUpdateSpotifyTokensParams) (SpotifyToken, error) {
	row := q.db.QueryRowContext(ctx, createOrUpdateSpotifyTokens,
		arg.SpotifyUserID,
		arg.CreatedAt,
		arg.RefreshToken,
		arg.AccessToken,
		arg.ExpiresAt,
		arg.TokenType,
	)
	var i SpotifyToken
	err := row.Scan(
		&i.ID,
		&i.SpotifyUserID,
		&i.CreatedAt,
		&i.RefreshToken,
		&i.AccessToken,
		&i.ExpiresAt,
		&i.TokenType,
	)
	return i, err
}

const getSpotifyToken = `-- name: GetSpotifyToken :one
SELECT id, spotify_user_id, created_at, refresh_token, access_token, expires_at, token_type FROM spotify_tokens
WHERE spotify_user_id = $1
LIMIT 1
`

func (q *Queries) GetSpotifyToken(ctx context.Context, spotifyUserID string) (SpotifyToken, error) {
	row := q.db.QueryRowContext(ctx, getSpotifyToken, spotifyUserID)
	var i SpotifyToken
	err := row.Scan(
		&i.ID,
		&i.SpotifyUserID,
		&i.CreatedAt,
		&i.RefreshToken,
		&i.AccessToken,
		&i.ExpiresAt,
		&i.TokenType,
	)
	return i, err
}
