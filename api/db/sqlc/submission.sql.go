// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: submission.sql

package db

import (
	"context"
	"time"
)

const createOrUpdatePlaylist = `-- name: CreateOrUpdatePlaylist :one
INSERT INTO user_playlists (
  spotify_user_id, 
  choice1, 
  choice2,
  choice3,
  choice4,
  choice5,
  choice6,
  choice7,
  choice8,
  choice9,
  choice10,
  created_at,
  updated_at
) VALUES (
  $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13
) 
ON CONFLICT(spotify_user_id)
DO UPDATE 
SET choice1 = $2,
    choice2 = $3,
    choice3 = $4,
    choice4 = $5,
    choice5 = $6,
    choice6 = $7,
    choice7 = $8,
    choice8 = $9,
    choice9 = $10,
    choice10 = $11,
    updated_at = $13
RETURNING id, spotify_user_id, choice1, choice2, choice3, choice4, choice5, choice6, choice7, choice8, choice9, choice10, created_at, updated_at
`

type CreateOrUpdatePlaylistParams struct {
	SpotifyUserID string    `json:"spotifyUserID"`
	Choice1       string    `json:"choice1"`
	Choice2       string    `json:"choice2"`
	Choice3       string    `json:"choice3"`
	Choice4       string    `json:"choice4"`
	Choice5       string    `json:"choice5"`
	Choice6       string    `json:"choice6"`
	Choice7       string    `json:"choice7"`
	Choice8       string    `json:"choice8"`
	Choice9       string    `json:"choice9"`
	Choice10      string    `json:"choice10"`
	CreatedAt     time.Time `json:"createdAt"`
	UpdatedAt     time.Time `json:"updatedAt"`
}

func (q *Queries) CreateOrUpdatePlaylist(ctx context.Context, arg CreateOrUpdatePlaylistParams) (UserPlaylist, error) {
	row := q.db.QueryRowContext(ctx, createOrUpdatePlaylist,
		arg.SpotifyUserID,
		arg.Choice1,
		arg.Choice2,
		arg.Choice3,
		arg.Choice4,
		arg.Choice5,
		arg.Choice6,
		arg.Choice7,
		arg.Choice8,
		arg.Choice9,
		arg.Choice10,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i UserPlaylist
	err := row.Scan(
		&i.ID,
		&i.SpotifyUserID,
		&i.Choice1,
		&i.Choice2,
		&i.Choice3,
		&i.Choice4,
		&i.Choice5,
		&i.Choice6,
		&i.Choice7,
		&i.Choice8,
		&i.Choice9,
		&i.Choice10,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPlaylist = `-- name: GetPlaylist :one
SELECT id, spotify_user_id, choice1, choice2, choice3, choice4, choice5, choice6, choice7, choice8, choice9, choice10, created_at, updated_at FROM user_playlists
WHERE spotify_user_id = $1
LIMIT 1
`

func (q *Queries) GetPlaylist(ctx context.Context, spotifyUserID string) (UserPlaylist, error) {
	row := q.db.QueryRowContext(ctx, getPlaylist, spotifyUserID)
	var i UserPlaylist
	err := row.Scan(
		&i.ID,
		&i.SpotifyUserID,
		&i.Choice1,
		&i.Choice2,
		&i.Choice3,
		&i.Choice4,
		&i.Choice5,
		&i.Choice6,
		&i.Choice7,
		&i.Choice8,
		&i.Choice9,
		&i.Choice10,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
